receivers:
  otlp:
    protocols:
      grpc:
      http:
  # https://opentelemetry.io/docs/kubernetes/collector/components/#kubeletstats-receiver
  kubeletstats:
    collection_interval: 60s
    auth_type: 'serviceAccount'
    endpoint: '${env:K8S_NODE_IP}:10250'
    insecure_skip_verify: true
    extra_metadata_labels:
      - k8s.volume.type
    metric_groups:
      - node
      - pod
      - container
      - volume
  prometheus:
    config:
      scrape_configs:
        - job_name: otel-collector
          scrape_interval: 5s
          static_configs:
            - targets: ['0.0.0.0:8888']
        - job_name: k8s-state-metrics
          scrape_interval: 60s
          static_configs:
            - targets: ['${env:K8S_STATE_METRICS_HOST}']
        - job_name: node-exporter
          scrape_interval: 60s
          static_configs:
            - targets: ['${env:NODE_EXPORTER__HOST}']
  filelog:
    include:
      - /var/log/containers/*.log
    include_file_path: true
    include_file_name: false
    operators:
      # Parse CRI-Containerd format
      - type: regex_parser
        # id: parser_containerd
        regex: '^(?P<time>[^ ^Z]+Z) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*) ?(?P<log>.*)$'
        # output: move_log
        timestamp:
          parse_from: attributes.time
          layout: '%Y-%m-%dT%H:%M:%S.%LZ'
      - type: move
        # id: move_log
        from: attributes.log
        to: body
        # output: move_stream
      - type: move
        # id: move_stream
        from: attributes.stream
        to: attributes["log.iostream"]
        # output: extract_metadata_from_filepath
      # Extract metadata from file path
      - type: regex_parser
        # id: extract_metadata_from_filepath
        parse_from: attributes["log.file.path"]
        regex: '^.*\/(?P<pod_name>[^_]+)_(?P<namespace>[^_]+)_(?P<container_name>[^\._]+)\.log$'
        # output: move_container_name
        cache:
          size: 128 # default maximum amount of Pods per Node is 110
      - type: move
        # id: move_container_name
        from: attributes.container_name
        to: resource["k8s.container.name"]
        # output: move_namespace
      - type: move
        # id: move_namespace
        from: attributes.namespace
        to: resource["k8s.namespace.name"]
        # output: move_pod_name
      - type: move
        # id: move_pod_name
        from: attributes.pod_name
        to: resource["k8s.pod.name"]
        # output: extract_service_name
      # Extract service name
      - type: regex_parser
        # id: extract_service_name
        parse_from: resource["k8s.container.name"]
        regex: '^(?P<service_name>[^.]+)-([^.]+)$'
        # output: move_service_name
      - type: move
        # id: move_service_name
        from: attributes.service_name
        to: resource["service.name"]

processors:
  batch:
  k8sattributes:
    auth_type: "serviceAccount"
  attributes/k8s-state-metrics:
    include:
      services: [k8s-state-metrics]
    actions:
      - key: k8s.node.name
        from_attribute: node
        action: upsert
      - key: node
        action: delete
      - key: k8s.namespace.name
        from_attribute: namespace
        action: upsert
      - key: namespace
        action: delete
      - key: k8s.pod.name
        from_attribute: pod
        action: upsert
      - key: pod
        action: delete
      - key: k8s.pod.uid
        from_attribute: uid
        action: upsert
      - key: uid
        action: delete
      - key: k8s.container.name
        from_attribute: container
        action: upsert
      - key: container
        action: delete
  attributes/node-exporter:
    include:
      services: [node-exporter]
    actions:
      - key: k8s.node.name
        value: ${env:K8S_NODE_NAME}
        action: upsert

exporters:
  logging:
    loglevel: debug
  prometheusremotewrite:
    endpoint: ${env:PROMETHEUS__HOST}/api/v1/write
    tls:
      insecure: true
    resource_to_telemetry_conversion:
      enabled: true
  clickhouse:
    endpoint: ${env:CLICKHOUSE__HOST}
    username: ${env:CLICKHOUSE__USERNAME}
    password: ${env:CLICKHOUSE__PASSWORD}
    database: ${env:CLICKHOUSE__DATABASE}
    ttl_days: 3
    timeout: 5s
    retry_on_failure:
      enabled: true
      initial_interval: 5s
      max_interval: 30s
      max_elapsed_time: 300s

extensions:
  health_check:
    endpoint: "0.0.0.0:13133"
    path: "/health/status"

service:
  # telemetry:
  #   logs:
  #     level: "debug"
  extensions: [health_check]
  pipelines:
    # traces:
    #   receivers: [otlp]
    #   processors: [k8sattributes, batch]
    #   exporters: [logging]
    metrics:
      receivers: [otlp, prometheus, kubeletstats]
      processors:
        - k8sattributes
        - attributes/k8s-state-metrics
        - attributes/node-exporter
        - batch
      exporters: [prometheusremotewrite]
    logs:
      receivers: [filelog]
      processors: [batch]
      exporters: [clickhouse]
